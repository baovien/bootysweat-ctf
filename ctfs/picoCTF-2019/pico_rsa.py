#!usr/bin/env python

from Crypto.Util.number import inverse 	# Only works with python 2 and not 3..
import math

task_1_p = 60413
task_1_q = 76753

task_2_n = 5051846941
task_2_p = 54269

task_4_p = 66347
task_4_q = 12611

task_5_e = 3
task_5_m = 6357294171489311547190987615544575133581967886499484091352661406414044440475205342882841236357665973431462491355089413710392273380203038793241564304774271529108729717

task_7_p = 92092076805892533739724722602668675840671093008520241548191914215399824020372076186460768206814914423802230398410980218741906960527104568970225804374404612617736579286959865287226538692911376507934256844456333236362669879347073756238894784951597211105734179388300051579994253565459304743059533646753003894559
task_7_q = 97846775312392801037224396977012615848433199640105786119757047098757998273009741128821931277074555731813289423891389911801250326299324018557072727051765547115514791337578758859803890173153277252326496062476389498019821358465433398338364421624871010292162533041884897182597065662521825095949253625730631876637
task_7_e = 65537

# TASK 1 - Finding n given p and q
task_1_n = (task_1_p * task_1_q)
print 'Task 1 n is: ', task_1_n
print '-----------------------------'


# TASK 2 - Finding q given n and p
task_2_q = int((task_2_n / task_2_p))
print 'Task 2 q is: ', task_2_q
print '-----------------------------'


# TASK 3 - Not possible with given parameters
print 'Task 3 is not possible!'
print '-----------------------------'


# TASK 4 - Finding the totient (phi) given p and q
task_4_n = (task_4_p - 1) * (task_4_q - 1)
print 'Task 4 totient is: ', task_4_n 
print '-----------------------------'


# TASK 5 - Finding the ciphertext (c) given e, n and plaintext (m) 
task_5 = str(pow(task_5_m, task_5_e))
print 'Task 5 ciphertext is: ', task_5
print '-----------------------------'


# TASK 6 - Not possible with given parameters
print 'Task 6 is not possible!'
print '-----------------------------'


# TASK 7 - finding d, given p, q, and e
task_7_totient = ((task_7_q - 1) * (task_7_p - 1))
task_7_d = inverse(task_7_e, task_7_totient)
print 'Task 7 d is: ', task_7_d
print '-----------------------------'


# TASK 8 - Finding the flag given n, p, e, c
n = 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
p = 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
q = n / p
e = 65537
c = 14177987223508642131782797570705581865562801943020304324633179842233648468773284681099013143283137490421880620316003804700542539367277056119924780390073376368416200076614798528210303393148038397972770835314176889384910743248227379602503304665968858682295687434435804347875820140516870497567301408412715581672979699897049453701769585723745678466885154478156861404094657217832388752774912467316297776811251467400544288767645372505477570969704731692064200678746651536132006463037418757874224499384628808197361618023507921293784071910631939869468132820891513863046467487362047958571217107053268878096051632274561080703969

# Calculating the message
totient = ((p - 1) * (q - 1))
d = inverse(e, totient)
task_8 = pow( c, d, n )
print 'Task 8 plaintext is: ', task_8
print '-----------------------------'

# Was correct, just need to convert the message to hex and then ascii
message = 14311663942709674867122208214901970650496788151239520971623411712977119792751215170179850877
hex_message = hex(message)[2:][:-1]
print 'Flag is: ', hex_message.decode('hex') 